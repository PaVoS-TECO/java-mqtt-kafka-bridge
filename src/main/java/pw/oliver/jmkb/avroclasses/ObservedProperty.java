/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pw.oliver.jmkb.avroclasses;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** An ObservedProperty specifies the phenomenon of an Observation. */
@org.apache.avro.specific.AvroGenerated
public class ObservedProperty extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3419499377113761679L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ObservedProperty\",\"namespace\":\"pw.oliver.jmkb.avroclasses\",\"doc\":\"An ObservedProperty specifies the phenomenon of an Observation.\",\"fields\":[{\"name\":\"iotId\",\"type\":\"string\",\"doc\":\"iotId of this ObservedProperty\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the ObservedProperty\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the ObservedProperty\"},{\"name\":\"definition\",\"type\":\"string\",\"doc\":\"URI of the definition of the ObservedProperty\"},{\"name\":\"Datastreams\",\"type\":[\"null\",\"string\"],\"doc\":\"Datastreams associated with this ObservedProperty\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ObservedProperty> ENCODER =
      new BinaryMessageEncoder<ObservedProperty>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ObservedProperty> DECODER =
      new BinaryMessageDecoder<ObservedProperty>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ObservedProperty> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ObservedProperty> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ObservedProperty>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ObservedProperty to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ObservedProperty from a ByteBuffer. */
  public static ObservedProperty fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** iotId of this ObservedProperty */
  @Deprecated public java.lang.CharSequence iotId;
  /** Name of the ObservedProperty */
  @Deprecated public java.lang.CharSequence name;
  /** Description of the ObservedProperty */
  @Deprecated public java.lang.CharSequence description;
  /** URI of the definition of the ObservedProperty */
  @Deprecated public java.lang.CharSequence definition;
  /** Datastreams associated with this ObservedProperty */
  @Deprecated public java.lang.CharSequence Datastreams;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ObservedProperty() {}

  /**
   * All-args constructor.
   * @param iotId iotId of this ObservedProperty
   * @param name Name of the ObservedProperty
   * @param description Description of the ObservedProperty
   * @param definition URI of the definition of the ObservedProperty
   * @param Datastreams Datastreams associated with this ObservedProperty
   */
  public ObservedProperty(java.lang.CharSequence iotId, java.lang.CharSequence name, java.lang.CharSequence description, java.lang.CharSequence definition, java.lang.CharSequence Datastreams) {
    this.iotId = iotId;
    this.name = name;
    this.description = description;
    this.definition = definition;
    this.Datastreams = Datastreams;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return iotId;
    case 1: return name;
    case 2: return description;
    case 3: return definition;
    case 4: return Datastreams;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: iotId = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: definition = (java.lang.CharSequence)value$; break;
    case 4: Datastreams = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'iotId' field.
   * @return iotId of this ObservedProperty
   */
  public java.lang.CharSequence getIotId() {
    return iotId;
  }

  /**
   * Sets the value of the 'iotId' field.
   * iotId of this ObservedProperty
   * @param value the value to set.
   */
  public void setIotId(java.lang.CharSequence value) {
    this.iotId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of the ObservedProperty
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of the ObservedProperty
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the ObservedProperty
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the ObservedProperty
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'definition' field.
   * @return URI of the definition of the ObservedProperty
   */
  public java.lang.CharSequence getDefinition() {
    return definition;
  }

  /**
   * Sets the value of the 'definition' field.
   * URI of the definition of the ObservedProperty
   * @param value the value to set.
   */
  public void setDefinition(java.lang.CharSequence value) {
    this.definition = value;
  }

  /**
   * Gets the value of the 'Datastreams' field.
   * @return Datastreams associated with this ObservedProperty
   */
  public java.lang.CharSequence getDatastreams() {
    return Datastreams;
  }

  /**
   * Sets the value of the 'Datastreams' field.
   * Datastreams associated with this ObservedProperty
   * @param value the value to set.
   */
  public void setDatastreams(java.lang.CharSequence value) {
    this.Datastreams = value;
  }

  /**
   * Creates a new ObservedProperty RecordBuilder.
   * @return A new ObservedProperty RecordBuilder
   */
  public static pw.oliver.jmkb.avroclasses.ObservedProperty.Builder newBuilder() {
    return new pw.oliver.jmkb.avroclasses.ObservedProperty.Builder();
  }

  /**
   * Creates a new ObservedProperty RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ObservedProperty RecordBuilder
   */
  public static pw.oliver.jmkb.avroclasses.ObservedProperty.Builder newBuilder(pw.oliver.jmkb.avroclasses.ObservedProperty.Builder other) {
    return new pw.oliver.jmkb.avroclasses.ObservedProperty.Builder(other);
  }

  /**
   * Creates a new ObservedProperty RecordBuilder by copying an existing ObservedProperty instance.
   * @param other The existing instance to copy.
   * @return A new ObservedProperty RecordBuilder
   */
  public static pw.oliver.jmkb.avroclasses.ObservedProperty.Builder newBuilder(pw.oliver.jmkb.avroclasses.ObservedProperty other) {
    return new pw.oliver.jmkb.avroclasses.ObservedProperty.Builder(other);
  }

  /**
   * RecordBuilder for ObservedProperty instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ObservedProperty>
    implements org.apache.avro.data.RecordBuilder<ObservedProperty> {

    /** iotId of this ObservedProperty */
    private java.lang.CharSequence iotId;
    /** Name of the ObservedProperty */
    private java.lang.CharSequence name;
    /** Description of the ObservedProperty */
    private java.lang.CharSequence description;
    /** URI of the definition of the ObservedProperty */
    private java.lang.CharSequence definition;
    /** Datastreams associated with this ObservedProperty */
    private java.lang.CharSequence Datastreams;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pw.oliver.jmkb.avroclasses.ObservedProperty.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.iotId)) {
        this.iotId = data().deepCopy(fields()[0].schema(), other.iotId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.definition)) {
        this.definition = data().deepCopy(fields()[3].schema(), other.definition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Datastreams)) {
        this.Datastreams = data().deepCopy(fields()[4].schema(), other.Datastreams);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ObservedProperty instance
     * @param other The existing instance to copy.
     */
    private Builder(pw.oliver.jmkb.avroclasses.ObservedProperty other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.iotId)) {
        this.iotId = data().deepCopy(fields()[0].schema(), other.iotId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.definition)) {
        this.definition = data().deepCopy(fields()[3].schema(), other.definition);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Datastreams)) {
        this.Datastreams = data().deepCopy(fields()[4].schema(), other.Datastreams);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'iotId' field.
      * iotId of this ObservedProperty
      * @return The value.
      */
    public java.lang.CharSequence getIotId() {
      return iotId;
    }

    /**
      * Sets the value of the 'iotId' field.
      * iotId of this ObservedProperty
      * @param value The value of 'iotId'.
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder setIotId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.iotId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'iotId' field has been set.
      * iotId of this ObservedProperty
      * @return True if the 'iotId' field has been set, false otherwise.
      */
    public boolean hasIotId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'iotId' field.
      * iotId of this ObservedProperty
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder clearIotId() {
      iotId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * Name of the ObservedProperty
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of the ObservedProperty
      * @param value The value of 'name'.
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of the ObservedProperty
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of the ObservedProperty
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the ObservedProperty
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of the ObservedProperty
      * @param value The value of 'description'.
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the ObservedProperty
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the ObservedProperty
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'definition' field.
      * URI of the definition of the ObservedProperty
      * @return The value.
      */
    public java.lang.CharSequence getDefinition() {
      return definition;
    }

    /**
      * Sets the value of the 'definition' field.
      * URI of the definition of the ObservedProperty
      * @param value The value of 'definition'.
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder setDefinition(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.definition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'definition' field has been set.
      * URI of the definition of the ObservedProperty
      * @return True if the 'definition' field has been set, false otherwise.
      */
    public boolean hasDefinition() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'definition' field.
      * URI of the definition of the ObservedProperty
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder clearDefinition() {
      definition = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Datastreams' field.
      * Datastreams associated with this ObservedProperty
      * @return The value.
      */
    public java.lang.CharSequence getDatastreams() {
      return Datastreams;
    }

    /**
      * Sets the value of the 'Datastreams' field.
      * Datastreams associated with this ObservedProperty
      * @param value The value of 'Datastreams'.
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder setDatastreams(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.Datastreams = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Datastreams' field has been set.
      * Datastreams associated with this ObservedProperty
      * @return True if the 'Datastreams' field has been set, false otherwise.
      */
    public boolean hasDatastreams() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Datastreams' field.
      * Datastreams associated with this ObservedProperty
      * @return This builder.
      */
    public pw.oliver.jmkb.avroclasses.ObservedProperty.Builder clearDatastreams() {
      Datastreams = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ObservedProperty build() {
      try {
        ObservedProperty record = new ObservedProperty();
        record.iotId = fieldSetFlags()[0] ? this.iotId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.definition = fieldSetFlags()[3] ? this.definition : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.Datastreams = fieldSetFlags()[4] ? this.Datastreams : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ObservedProperty>
    WRITER$ = (org.apache.avro.io.DatumWriter<ObservedProperty>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ObservedProperty>
    READER$ = (org.apache.avro.io.DatumReader<ObservedProperty>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
