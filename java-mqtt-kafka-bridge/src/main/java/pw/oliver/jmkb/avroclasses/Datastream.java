/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package main.java.pw.oliver.jmkb.avroclasses;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A Datastream groups a collection of Observations measuring the same ObservedProperty and produced by the same Sensor. */
@org.apache.avro.specific.AvroGenerated
public class Datastream extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3964199374562696087L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Datastream\",\"namespace\":\"main.java.pw.oliver.jmkb.avroclasses\",\"doc\":\"A Datastream groups a collection of Observations measuring the same ObservedProperty and produced by the same Sensor.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Datastream\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Datastream\"},{\"name\":\"observationType\",\"type\":\"string\",\"doc\":\"Type of the Observation\"},{\"name\":\"unitOfMeasurement\",\"type\":{\"type\":\"record\",\"name\":\"UnitOfMeasurement\",\"doc\":\"The Unit of Measurement of an Observation\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"String representation of the Unit of Measurement\"},{\"name\":\"symbol\",\"type\":\"string\",\"doc\":\"Symbol of the Unit of Measurement\"},{\"name\":\"definition\",\"type\":\"string\",\"doc\":\"Definition of the Unit of Measurement\"}]},\"doc\":\"Unit of Measurement for the Observation\"},{\"name\":\"observedArea\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.\"},{\"name\":\"phenomenonTime\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional time interval (ISO 8601) of the phenomenon\"},{\"name\":\"resultTime\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional time interval (ISO 8601) of the result\"},{\"name\":\"Thing\",\"type\":{\"type\":\"record\",\"name\":\"Thing\",\"doc\":\"A Thing has Locations and one or more Datastreams to collect Observations.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Thing\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Thing\"},{\"name\":\"properties\",\"type\":\"null\",\"doc\":\"Properties of the Thing (currently unused)\"},{\"name\":\"Locations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"doc\":\"A Things Location entity is defined as the last known location of the Thing. A Thing can have multiple Locations if all Locations are different representations of same Location with different encodingType.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Location\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Location\"},{\"name\":\"encodingType\",\"type\":\"string\",\"doc\":\"Representation/encoding type of the Location\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"LocationType\",\"doc\":\"The type of the location, for example Point\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Name of the LocationType\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Coordinates for the LocationType\"}]},\"doc\":\"LocationType containing the actual location of the Thing\"}]}}],\"doc\":\"Optional Location(s) of the Thing\"},{\"name\":\"HistoricalLocations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"doc\":\"Optional HistoricalLocation(s) of the Thing\"},{\"name\":\"Datastreams\",\"type\":\"null\",\"doc\":\"Unused optional Datastream(s) of the Thing\"}]},\"doc\":\"Thing associated to this Datastream\"},{\"name\":\"ObservedProperty\",\"type\":{\"type\":\"record\",\"name\":\"ObservedProperty\",\"doc\":\"An ObservedProperty specifies the phenomenon of an Observation.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the ObservedProperty\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the ObservedProperty\"},{\"name\":\"definition\",\"type\":\"string\",\"doc\":\"URI of the definition of the ObservedProperty\"}]},\"doc\":\"ObservedProperty associated to this Datastream\"},{\"name\":\"Sensor\",\"type\":{\"type\":\"record\",\"name\":\"Sensor\",\"doc\":\"A Sensor is an instrument that observes a property or phenomenon with the goal of producing an estimate of the value of the property.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Sensor\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Sensor\"},{\"name\":\"encodingType\",\"type\":\"string\",\"doc\":\"Encoding type of the Sensor\"},{\"name\":\"metadata\",\"type\":\"string\",\"doc\":\"Metadata of the Sensor\"}]},\"doc\":\"Sensor associated to this Datastream\"},{\"name\":\"Observations\",\"type\":\"null\",\"doc\":\"Unused optional Observation(s) associated to this Datastream\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Datastream> ENCODER =
      new BinaryMessageEncoder<Datastream>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Datastream> DECODER =
      new BinaryMessageDecoder<Datastream>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Datastream> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Datastream> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Datastream>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Datastream to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Datastream from a ByteBuffer. */
  public static Datastream fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Name of the Datastream */
  @Deprecated public java.lang.CharSequence name;
  /** Description of the Datastream */
  @Deprecated public java.lang.CharSequence description;
  /** Type of the Observation */
  @Deprecated public java.lang.CharSequence observationType;
  /** Unit of Measurement for the Observation */
  @Deprecated public main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement unitOfMeasurement;
  /** An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required. */
  @Deprecated public java.lang.CharSequence observedArea;
  /** An optional time interval (ISO 8601) of the phenomenon */
  @Deprecated public java.lang.CharSequence phenomenonTime;
  /** An optional time interval (ISO 8601) of the result */
  @Deprecated public java.lang.CharSequence resultTime;
  /** Thing associated to this Datastream */
  @Deprecated public main.java.pw.oliver.jmkb.avroclasses.Thing Thing;
  /** ObservedProperty associated to this Datastream */
  @Deprecated public main.java.pw.oliver.jmkb.avroclasses.ObservedProperty ObservedProperty;
  /** Sensor associated to this Datastream */
  @Deprecated public main.java.pw.oliver.jmkb.avroclasses.Sensor Sensor;
  /** Unused optional Observation(s) associated to this Datastream */
  @Deprecated public java.lang.Void Observations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Datastream() {}

  /**
   * All-args constructor.
   * @param name Name of the Datastream
   * @param description Description of the Datastream
   * @param observationType Type of the Observation
   * @param unitOfMeasurement Unit of Measurement for the Observation
   * @param observedArea An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
   * @param phenomenonTime An optional time interval (ISO 8601) of the phenomenon
   * @param resultTime An optional time interval (ISO 8601) of the result
   * @param Thing Thing associated to this Datastream
   * @param ObservedProperty ObservedProperty associated to this Datastream
   * @param Sensor Sensor associated to this Datastream
   * @param Observations Unused optional Observation(s) associated to this Datastream
   */
  public Datastream(java.lang.CharSequence name, java.lang.CharSequence description, java.lang.CharSequence observationType, main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement unitOfMeasurement, java.lang.CharSequence observedArea, java.lang.CharSequence phenomenonTime, java.lang.CharSequence resultTime, main.java.pw.oliver.jmkb.avroclasses.Thing Thing, main.java.pw.oliver.jmkb.avroclasses.ObservedProperty ObservedProperty, main.java.pw.oliver.jmkb.avroclasses.Sensor Sensor, java.lang.Void Observations) {
    this.name = name;
    this.description = description;
    this.observationType = observationType;
    this.unitOfMeasurement = unitOfMeasurement;
    this.observedArea = observedArea;
    this.phenomenonTime = phenomenonTime;
    this.resultTime = resultTime;
    this.Thing = Thing;
    this.ObservedProperty = ObservedProperty;
    this.Sensor = Sensor;
    this.Observations = Observations;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return description;
    case 2: return observationType;
    case 3: return unitOfMeasurement;
    case 4: return observedArea;
    case 5: return phenomenonTime;
    case 6: return resultTime;
    case 7: return Thing;
    case 8: return ObservedProperty;
    case 9: return Sensor;
    case 10: return Observations;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: description = (java.lang.CharSequence)value$; break;
    case 2: observationType = (java.lang.CharSequence)value$; break;
    case 3: unitOfMeasurement = (main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement)value$; break;
    case 4: observedArea = (java.lang.CharSequence)value$; break;
    case 5: phenomenonTime = (java.lang.CharSequence)value$; break;
    case 6: resultTime = (java.lang.CharSequence)value$; break;
    case 7: Thing = (main.java.pw.oliver.jmkb.avroclasses.Thing)value$; break;
    case 8: ObservedProperty = (main.java.pw.oliver.jmkb.avroclasses.ObservedProperty)value$; break;
    case 9: Sensor = (main.java.pw.oliver.jmkb.avroclasses.Sensor)value$; break;
    case 10: Observations = (java.lang.Void)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return Name of the Datastream
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of the Datastream
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of the Datastream
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the Datastream
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'observationType' field.
   * @return Type of the Observation
   */
  public java.lang.CharSequence getObservationType() {
    return observationType;
  }

  /**
   * Sets the value of the 'observationType' field.
   * Type of the Observation
   * @param value the value to set.
   */
  public void setObservationType(java.lang.CharSequence value) {
    this.observationType = value;
  }

  /**
   * Gets the value of the 'unitOfMeasurement' field.
   * @return Unit of Measurement for the Observation
   */
  public main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement getUnitOfMeasurement() {
    return unitOfMeasurement;
  }

  /**
   * Sets the value of the 'unitOfMeasurement' field.
   * Unit of Measurement for the Observation
   * @param value the value to set.
   */
  public void setUnitOfMeasurement(main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement value) {
    this.unitOfMeasurement = value;
  }

  /**
   * Gets the value of the 'observedArea' field.
   * @return An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
   */
  public java.lang.CharSequence getObservedArea() {
    return observedArea;
  }

  /**
   * Sets the value of the 'observedArea' field.
   * An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
   * @param value the value to set.
   */
  public void setObservedArea(java.lang.CharSequence value) {
    this.observedArea = value;
  }

  /**
   * Gets the value of the 'phenomenonTime' field.
   * @return An optional time interval (ISO 8601) of the phenomenon
   */
  public java.lang.CharSequence getPhenomenonTime() {
    return phenomenonTime;
  }

  /**
   * Sets the value of the 'phenomenonTime' field.
   * An optional time interval (ISO 8601) of the phenomenon
   * @param value the value to set.
   */
  public void setPhenomenonTime(java.lang.CharSequence value) {
    this.phenomenonTime = value;
  }

  /**
   * Gets the value of the 'resultTime' field.
   * @return An optional time interval (ISO 8601) of the result
   */
  public java.lang.CharSequence getResultTime() {
    return resultTime;
  }

  /**
   * Sets the value of the 'resultTime' field.
   * An optional time interval (ISO 8601) of the result
   * @param value the value to set.
   */
  public void setResultTime(java.lang.CharSequence value) {
    this.resultTime = value;
  }

  /**
   * Gets the value of the 'Thing' field.
   * @return Thing associated to this Datastream
   */
  public main.java.pw.oliver.jmkb.avroclasses.Thing getThing() {
    return Thing;
  }

  /**
   * Sets the value of the 'Thing' field.
   * Thing associated to this Datastream
   * @param value the value to set.
   */
  public void setThing(main.java.pw.oliver.jmkb.avroclasses.Thing value) {
    this.Thing = value;
  }

  /**
   * Gets the value of the 'ObservedProperty' field.
   * @return ObservedProperty associated to this Datastream
   */
  public main.java.pw.oliver.jmkb.avroclasses.ObservedProperty getObservedProperty() {
    return ObservedProperty;
  }

  /**
   * Sets the value of the 'ObservedProperty' field.
   * ObservedProperty associated to this Datastream
   * @param value the value to set.
   */
  public void setObservedProperty(main.java.pw.oliver.jmkb.avroclasses.ObservedProperty value) {
    this.ObservedProperty = value;
  }

  /**
   * Gets the value of the 'Sensor' field.
   * @return Sensor associated to this Datastream
   */
  public main.java.pw.oliver.jmkb.avroclasses.Sensor getSensor() {
    return Sensor;
  }

  /**
   * Sets the value of the 'Sensor' field.
   * Sensor associated to this Datastream
   * @param value the value to set.
   */
  public void setSensor(main.java.pw.oliver.jmkb.avroclasses.Sensor value) {
    this.Sensor = value;
  }

  /**
   * Gets the value of the 'Observations' field.
   * @return Unused optional Observation(s) associated to this Datastream
   */
  public java.lang.Void getObservations() {
    return Observations;
  }

  /**
   * Sets the value of the 'Observations' field.
   * Unused optional Observation(s) associated to this Datastream
   * @param value the value to set.
   */
  public void setObservations(java.lang.Void value) {
    this.Observations = value;
  }

  /**
   * Creates a new Datastream RecordBuilder.
   * @return A new Datastream RecordBuilder
   */
  public static main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder newBuilder() {
    return new main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder();
  }

  /**
   * Creates a new Datastream RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Datastream RecordBuilder
   */
  public static main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder newBuilder(main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder other) {
    return new main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder(other);
  }

  /**
   * Creates a new Datastream RecordBuilder by copying an existing Datastream instance.
   * @param other The existing instance to copy.
   * @return A new Datastream RecordBuilder
   */
  public static main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder newBuilder(main.java.pw.oliver.jmkb.avroclasses.Datastream other) {
    return new main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder(other);
  }

  /**
   * RecordBuilder for Datastream instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Datastream>
    implements org.apache.avro.data.RecordBuilder<Datastream> {

    /** Name of the Datastream */
    private java.lang.CharSequence name;
    /** Description of the Datastream */
    private java.lang.CharSequence description;
    /** Type of the Observation */
    private java.lang.CharSequence observationType;
    /** Unit of Measurement for the Observation */
    private main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement unitOfMeasurement;
    private main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement.Builder unitOfMeasurementBuilder;
    /** An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required. */
    private java.lang.CharSequence observedArea;
    /** An optional time interval (ISO 8601) of the phenomenon */
    private java.lang.CharSequence phenomenonTime;
    /** An optional time interval (ISO 8601) of the result */
    private java.lang.CharSequence resultTime;
    /** Thing associated to this Datastream */
    private main.java.pw.oliver.jmkb.avroclasses.Thing Thing;
    private main.java.pw.oliver.jmkb.avroclasses.Thing.Builder ThingBuilder;
    /** ObservedProperty associated to this Datastream */
    private main.java.pw.oliver.jmkb.avroclasses.ObservedProperty ObservedProperty;
    private main.java.pw.oliver.jmkb.avroclasses.ObservedProperty.Builder ObservedPropertyBuilder;
    /** Sensor associated to this Datastream */
    private main.java.pw.oliver.jmkb.avroclasses.Sensor Sensor;
    private main.java.pw.oliver.jmkb.avroclasses.Sensor.Builder SensorBuilder;
    /** Unused optional Observation(s) associated to this Datastream */
    private java.lang.Void Observations;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.observationType)) {
        this.observationType = data().deepCopy(fields()[2].schema(), other.observationType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unitOfMeasurement)) {
        this.unitOfMeasurement = data().deepCopy(fields()[3].schema(), other.unitOfMeasurement);
        fieldSetFlags()[3] = true;
      }
      if (other.hasUnitOfMeasurementBuilder()) {
        this.unitOfMeasurementBuilder = main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement.newBuilder(other.getUnitOfMeasurementBuilder());
      }
      if (isValidValue(fields()[4], other.observedArea)) {
        this.observedArea = data().deepCopy(fields()[4].schema(), other.observedArea);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phenomenonTime)) {
        this.phenomenonTime = data().deepCopy(fields()[5].schema(), other.phenomenonTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.resultTime)) {
        this.resultTime = data().deepCopy(fields()[6].schema(), other.resultTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Thing)) {
        this.Thing = data().deepCopy(fields()[7].schema(), other.Thing);
        fieldSetFlags()[7] = true;
      }
      if (other.hasThingBuilder()) {
        this.ThingBuilder = main.java.pw.oliver.jmkb.avroclasses.Thing.newBuilder(other.getThingBuilder());
      }
      if (isValidValue(fields()[8], other.ObservedProperty)) {
        this.ObservedProperty = data().deepCopy(fields()[8].schema(), other.ObservedProperty);
        fieldSetFlags()[8] = true;
      }
      if (other.hasObservedPropertyBuilder()) {
        this.ObservedPropertyBuilder = main.java.pw.oliver.jmkb.avroclasses.ObservedProperty.newBuilder(other.getObservedPropertyBuilder());
      }
      if (isValidValue(fields()[9], other.Sensor)) {
        this.Sensor = data().deepCopy(fields()[9].schema(), other.Sensor);
        fieldSetFlags()[9] = true;
      }
      if (other.hasSensorBuilder()) {
        this.SensorBuilder = main.java.pw.oliver.jmkb.avroclasses.Sensor.newBuilder(other.getSensorBuilder());
      }
      if (isValidValue(fields()[10], other.Observations)) {
        this.Observations = data().deepCopy(fields()[10].schema(), other.Observations);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Datastream instance
     * @param other The existing instance to copy.
     */
    private Builder(main.java.pw.oliver.jmkb.avroclasses.Datastream other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.observationType)) {
        this.observationType = data().deepCopy(fields()[2].schema(), other.observationType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.unitOfMeasurement)) {
        this.unitOfMeasurement = data().deepCopy(fields()[3].schema(), other.unitOfMeasurement);
        fieldSetFlags()[3] = true;
      }
      this.unitOfMeasurementBuilder = null;
      if (isValidValue(fields()[4], other.observedArea)) {
        this.observedArea = data().deepCopy(fields()[4].schema(), other.observedArea);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phenomenonTime)) {
        this.phenomenonTime = data().deepCopy(fields()[5].schema(), other.phenomenonTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.resultTime)) {
        this.resultTime = data().deepCopy(fields()[6].schema(), other.resultTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Thing)) {
        this.Thing = data().deepCopy(fields()[7].schema(), other.Thing);
        fieldSetFlags()[7] = true;
      }
      this.ThingBuilder = null;
      if (isValidValue(fields()[8], other.ObservedProperty)) {
        this.ObservedProperty = data().deepCopy(fields()[8].schema(), other.ObservedProperty);
        fieldSetFlags()[8] = true;
      }
      this.ObservedPropertyBuilder = null;
      if (isValidValue(fields()[9], other.Sensor)) {
        this.Sensor = data().deepCopy(fields()[9].schema(), other.Sensor);
        fieldSetFlags()[9] = true;
      }
      this.SensorBuilder = null;
      if (isValidValue(fields()[10], other.Observations)) {
        this.Observations = data().deepCopy(fields()[10].schema(), other.Observations);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * Name of the Datastream
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * Name of the Datastream
      * @param value The value of 'name'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * Name of the Datastream
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * Name of the Datastream
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of the Datastream
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * Description of the Datastream
      * @param value The value of 'description'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of the Datastream
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of the Datastream
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'observationType' field.
      * Type of the Observation
      * @return The value.
      */
    public java.lang.CharSequence getObservationType() {
      return observationType;
    }

    /**
      * Sets the value of the 'observationType' field.
      * Type of the Observation
      * @param value The value of 'observationType'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setObservationType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.observationType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'observationType' field has been set.
      * Type of the Observation
      * @return True if the 'observationType' field has been set, false otherwise.
      */
    public boolean hasObservationType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'observationType' field.
      * Type of the Observation
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearObservationType() {
      observationType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'unitOfMeasurement' field.
      * Unit of Measurement for the Observation
      * @return The value.
      */
    public main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement getUnitOfMeasurement() {
      return unitOfMeasurement;
    }

    /**
      * Sets the value of the 'unitOfMeasurement' field.
      * Unit of Measurement for the Observation
      * @param value The value of 'unitOfMeasurement'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setUnitOfMeasurement(main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement value) {
      validate(fields()[3], value);
      this.unitOfMeasurementBuilder = null;
      this.unitOfMeasurement = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'unitOfMeasurement' field has been set.
      * Unit of Measurement for the Observation
      * @return True if the 'unitOfMeasurement' field has been set, false otherwise.
      */
    public boolean hasUnitOfMeasurement() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'unitOfMeasurement' field and creates one if it doesn't exist yet.
     * Unit of Measurement for the Observation
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement.Builder getUnitOfMeasurementBuilder() {
      if (unitOfMeasurementBuilder == null) {
        if (hasUnitOfMeasurement()) {
          setUnitOfMeasurementBuilder(main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement.newBuilder(unitOfMeasurement));
        } else {
          setUnitOfMeasurementBuilder(main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement.newBuilder());
        }
      }
      return unitOfMeasurementBuilder;
    }

    /**
     * Sets the Builder instance for the 'unitOfMeasurement' field
     * Unit of Measurement for the Observation
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setUnitOfMeasurementBuilder(main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement.Builder value) {
      clearUnitOfMeasurement();
      unitOfMeasurementBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'unitOfMeasurement' field has an active Builder instance
     * Unit of Measurement for the Observation
     * @return True if the 'unitOfMeasurement' field has an active Builder instance
     */
    public boolean hasUnitOfMeasurementBuilder() {
      return unitOfMeasurementBuilder != null;
    }

    /**
      * Clears the value of the 'unitOfMeasurement' field.
      * Unit of Measurement for the Observation
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearUnitOfMeasurement() {
      unitOfMeasurement = null;
      unitOfMeasurementBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'observedArea' field.
      * An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
      * @return The value.
      */
    public java.lang.CharSequence getObservedArea() {
      return observedArea;
    }

    /**
      * Sets the value of the 'observedArea' field.
      * An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
      * @param value The value of 'observedArea'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setObservedArea(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.observedArea = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'observedArea' field has been set.
      * An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
      * @return True if the 'observedArea' field has been set, false otherwise.
      */
    public boolean hasObservedArea() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'observedArea' field.
      * An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearObservedArea() {
      observedArea = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'phenomenonTime' field.
      * An optional time interval (ISO 8601) of the phenomenon
      * @return The value.
      */
    public java.lang.CharSequence getPhenomenonTime() {
      return phenomenonTime;
    }

    /**
      * Sets the value of the 'phenomenonTime' field.
      * An optional time interval (ISO 8601) of the phenomenon
      * @param value The value of 'phenomenonTime'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setPhenomenonTime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.phenomenonTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'phenomenonTime' field has been set.
      * An optional time interval (ISO 8601) of the phenomenon
      * @return True if the 'phenomenonTime' field has been set, false otherwise.
      */
    public boolean hasPhenomenonTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'phenomenonTime' field.
      * An optional time interval (ISO 8601) of the phenomenon
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearPhenomenonTime() {
      phenomenonTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'resultTime' field.
      * An optional time interval (ISO 8601) of the result
      * @return The value.
      */
    public java.lang.CharSequence getResultTime() {
      return resultTime;
    }

    /**
      * Sets the value of the 'resultTime' field.
      * An optional time interval (ISO 8601) of the result
      * @param value The value of 'resultTime'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setResultTime(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.resultTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'resultTime' field has been set.
      * An optional time interval (ISO 8601) of the result
      * @return True if the 'resultTime' field has been set, false otherwise.
      */
    public boolean hasResultTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'resultTime' field.
      * An optional time interval (ISO 8601) of the result
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearResultTime() {
      resultTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Thing' field.
      * Thing associated to this Datastream
      * @return The value.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Thing getThing() {
      return Thing;
    }

    /**
      * Sets the value of the 'Thing' field.
      * Thing associated to this Datastream
      * @param value The value of 'Thing'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setThing(main.java.pw.oliver.jmkb.avroclasses.Thing value) {
      validate(fields()[7], value);
      this.ThingBuilder = null;
      this.Thing = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Thing' field has been set.
      * Thing associated to this Datastream
      * @return True if the 'Thing' field has been set, false otherwise.
      */
    public boolean hasThing() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'Thing' field and creates one if it doesn't exist yet.
     * Thing associated to this Datastream
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Thing.Builder getThingBuilder() {
      if (ThingBuilder == null) {
        if (hasThing()) {
          setThingBuilder(main.java.pw.oliver.jmkb.avroclasses.Thing.newBuilder(Thing));
        } else {
          setThingBuilder(main.java.pw.oliver.jmkb.avroclasses.Thing.newBuilder());
        }
      }
      return ThingBuilder;
    }

    /**
     * Sets the Builder instance for the 'Thing' field
     * Thing associated to this Datastream
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setThingBuilder(main.java.pw.oliver.jmkb.avroclasses.Thing.Builder value) {
      clearThing();
      ThingBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Thing' field has an active Builder instance
     * Thing associated to this Datastream
     * @return True if the 'Thing' field has an active Builder instance
     */
    public boolean hasThingBuilder() {
      return ThingBuilder != null;
    }

    /**
      * Clears the value of the 'Thing' field.
      * Thing associated to this Datastream
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearThing() {
      Thing = null;
      ThingBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'ObservedProperty' field.
      * ObservedProperty associated to this Datastream
      * @return The value.
      */
    public main.java.pw.oliver.jmkb.avroclasses.ObservedProperty getObservedProperty() {
      return ObservedProperty;
    }

    /**
      * Sets the value of the 'ObservedProperty' field.
      * ObservedProperty associated to this Datastream
      * @param value The value of 'ObservedProperty'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setObservedProperty(main.java.pw.oliver.jmkb.avroclasses.ObservedProperty value) {
      validate(fields()[8], value);
      this.ObservedPropertyBuilder = null;
      this.ObservedProperty = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'ObservedProperty' field has been set.
      * ObservedProperty associated to this Datastream
      * @return True if the 'ObservedProperty' field has been set, false otherwise.
      */
    public boolean hasObservedProperty() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'ObservedProperty' field and creates one if it doesn't exist yet.
     * ObservedProperty associated to this Datastream
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.ObservedProperty.Builder getObservedPropertyBuilder() {
      if (ObservedPropertyBuilder == null) {
        if (hasObservedProperty()) {
          setObservedPropertyBuilder(main.java.pw.oliver.jmkb.avroclasses.ObservedProperty.newBuilder(ObservedProperty));
        } else {
          setObservedPropertyBuilder(main.java.pw.oliver.jmkb.avroclasses.ObservedProperty.newBuilder());
        }
      }
      return ObservedPropertyBuilder;
    }

    /**
     * Sets the Builder instance for the 'ObservedProperty' field
     * ObservedProperty associated to this Datastream
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setObservedPropertyBuilder(main.java.pw.oliver.jmkb.avroclasses.ObservedProperty.Builder value) {
      clearObservedProperty();
      ObservedPropertyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ObservedProperty' field has an active Builder instance
     * ObservedProperty associated to this Datastream
     * @return True if the 'ObservedProperty' field has an active Builder instance
     */
    public boolean hasObservedPropertyBuilder() {
      return ObservedPropertyBuilder != null;
    }

    /**
      * Clears the value of the 'ObservedProperty' field.
      * ObservedProperty associated to this Datastream
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearObservedProperty() {
      ObservedProperty = null;
      ObservedPropertyBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'Sensor' field.
      * Sensor associated to this Datastream
      * @return The value.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Sensor getSensor() {
      return Sensor;
    }

    /**
      * Sets the value of the 'Sensor' field.
      * Sensor associated to this Datastream
      * @param value The value of 'Sensor'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setSensor(main.java.pw.oliver.jmkb.avroclasses.Sensor value) {
      validate(fields()[9], value);
      this.SensorBuilder = null;
      this.Sensor = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'Sensor' field has been set.
      * Sensor associated to this Datastream
      * @return True if the 'Sensor' field has been set, false otherwise.
      */
    public boolean hasSensor() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'Sensor' field and creates one if it doesn't exist yet.
     * Sensor associated to this Datastream
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Sensor.Builder getSensorBuilder() {
      if (SensorBuilder == null) {
        if (hasSensor()) {
          setSensorBuilder(main.java.pw.oliver.jmkb.avroclasses.Sensor.newBuilder(Sensor));
        } else {
          setSensorBuilder(main.java.pw.oliver.jmkb.avroclasses.Sensor.newBuilder());
        }
      }
      return SensorBuilder;
    }

    /**
     * Sets the Builder instance for the 'Sensor' field
     * Sensor associated to this Datastream
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setSensorBuilder(main.java.pw.oliver.jmkb.avroclasses.Sensor.Builder value) {
      clearSensor();
      SensorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Sensor' field has an active Builder instance
     * Sensor associated to this Datastream
     * @return True if the 'Sensor' field has an active Builder instance
     */
    public boolean hasSensorBuilder() {
      return SensorBuilder != null;
    }

    /**
      * Clears the value of the 'Sensor' field.
      * Sensor associated to this Datastream
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearSensor() {
      Sensor = null;
      SensorBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'Observations' field.
      * Unused optional Observation(s) associated to this Datastream
      * @return The value.
      */
    public java.lang.Void getObservations() {
      return Observations;
    }

    /**
      * Sets the value of the 'Observations' field.
      * Unused optional Observation(s) associated to this Datastream
      * @param value The value of 'Observations'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder setObservations(java.lang.Void value) {
      validate(fields()[10], value);
      this.Observations = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'Observations' field has been set.
      * Unused optional Observation(s) associated to this Datastream
      * @return True if the 'Observations' field has been set, false otherwise.
      */
    public boolean hasObservations() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'Observations' field.
      * Unused optional Observation(s) associated to this Datastream
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder clearObservations() {
      Observations = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Datastream build() {
      try {
        Datastream record = new Datastream();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.observationType = fieldSetFlags()[2] ? this.observationType : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (unitOfMeasurementBuilder != null) {
          record.unitOfMeasurement = this.unitOfMeasurementBuilder.build();
        } else {
          record.unitOfMeasurement = fieldSetFlags()[3] ? this.unitOfMeasurement : (main.java.pw.oliver.jmkb.avroclasses.UnitOfMeasurement) defaultValue(fields()[3]);
        }
        record.observedArea = fieldSetFlags()[4] ? this.observedArea : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.phenomenonTime = fieldSetFlags()[5] ? this.phenomenonTime : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.resultTime = fieldSetFlags()[6] ? this.resultTime : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (ThingBuilder != null) {
          record.Thing = this.ThingBuilder.build();
        } else {
          record.Thing = fieldSetFlags()[7] ? this.Thing : (main.java.pw.oliver.jmkb.avroclasses.Thing) defaultValue(fields()[7]);
        }
        if (ObservedPropertyBuilder != null) {
          record.ObservedProperty = this.ObservedPropertyBuilder.build();
        } else {
          record.ObservedProperty = fieldSetFlags()[8] ? this.ObservedProperty : (main.java.pw.oliver.jmkb.avroclasses.ObservedProperty) defaultValue(fields()[8]);
        }
        if (SensorBuilder != null) {
          record.Sensor = this.SensorBuilder.build();
        } else {
          record.Sensor = fieldSetFlags()[9] ? this.Sensor : (main.java.pw.oliver.jmkb.avroclasses.Sensor) defaultValue(fields()[9]);
        }
        record.Observations = fieldSetFlags()[10] ? this.Observations : (java.lang.Void) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Datastream>
    WRITER$ = (org.apache.avro.io.DatumWriter<Datastream>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Datastream>
    READER$ = (org.apache.avro.io.DatumReader<Datastream>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
