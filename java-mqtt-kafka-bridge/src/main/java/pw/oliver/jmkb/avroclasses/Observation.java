/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package main.java.pw.oliver.jmkb.avroclasses;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** An Observation represents a single Sensor reading of an ObservedProperty. A Sensor sends Observations to a specified Datastream. */
@org.apache.avro.specific.AvroGenerated
public class Observation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3269697312174971802L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Observation\",\"namespace\":\"main.java.pw.oliver.jmkb.avroclasses\",\"doc\":\"An Observation represents a single Sensor reading of an ObservedProperty. A Sensor sends Observations to a specified Datastream.\",\"fields\":[{\"name\":\"phenomenonTime\",\"type\":\"string\",\"doc\":\"Time (ISO 8601) of the phenomenon\"},{\"name\":\"resultTime\",\"type\":\"string\",\"doc\":\"Time (ISO 8601) of the result\"},{\"name\":\"result\",\"type\":\"string\",\"doc\":\"Any result value represented as a string\"},{\"name\":\"resultQuality\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional string describing the quality of the result\"},{\"name\":\"validTime\",\"type\":[\"null\",\"string\"],\"doc\":\"Optional time (ISO 8601) of validity\"},{\"name\":\"parameters\",\"type\":\"null\",\"doc\":\"Parameters of the Observation (currently unused)\"},{\"name\":\"Datastream\",\"type\":{\"type\":\"record\",\"name\":\"Datastream\",\"doc\":\"A Datastream groups a collection of Observations measuring the same ObservedProperty and produced by the same Sensor.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Datastream\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Datastream\"},{\"name\":\"observationType\",\"type\":\"string\",\"doc\":\"Type of the Observation\"},{\"name\":\"unitOfMeasurement\",\"type\":{\"type\":\"record\",\"name\":\"UnitOfMeasurement\",\"doc\":\"The Unit of Measurement of an Observation\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"String representation of the Unit of Measurement\"},{\"name\":\"symbol\",\"type\":\"string\",\"doc\":\"Symbol of the Unit of Measurement\"},{\"name\":\"definition\",\"type\":\"string\",\"doc\":\"Definition of the Unit of Measurement\"}]},\"doc\":\"Unit of Measurement for the Observation\"},{\"name\":\"observedArea\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional GeoJSON Polygon Object. Replace string with name of a new avsc schema of the Polygon Object if required.\"},{\"name\":\"phenomenonTime\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional time interval (ISO 8601) of the phenomenon\"},{\"name\":\"resultTime\",\"type\":[\"null\",\"string\"],\"doc\":\"An optional time interval (ISO 8601) of the result\"},{\"name\":\"Thing\",\"type\":{\"type\":\"record\",\"name\":\"Thing\",\"doc\":\"A Thing has Locations and one or more Datastreams to collect Observations.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Thing\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Thing\"},{\"name\":\"properties\",\"type\":\"null\",\"doc\":\"Properties of the Thing (currently unused)\"},{\"name\":\"Locations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"doc\":\"A Things Location entity is defined as the last known location of the Thing. A Thing can have multiple Locations if all Locations are different representations of same Location with different encodingType.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Location\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Location\"},{\"name\":\"encodingType\",\"type\":\"string\",\"doc\":\"Representation/encoding type of the Location\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"LocationType\",\"doc\":\"The type of the location, for example Point\",\"fields\":[{\"name\":\"type\",\"type\":\"string\",\"doc\":\"Name of the LocationType\"},{\"name\":\"coordinates\",\"type\":{\"type\":\"array\",\"items\":\"double\"},\"doc\":\"Coordinates for the LocationType\"}]},\"doc\":\"LocationType containing the actual location of the Thing\"}]}}],\"doc\":\"Optional Location(s) of the Thing\"},{\"name\":\"HistoricalLocations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Location\"}],\"doc\":\"Optional HistoricalLocation(s) of the Thing\"},{\"name\":\"Datastreams\",\"type\":\"null\",\"doc\":\"Unused optional Datastream(s) of the Thing\"}]},\"doc\":\"Thing associated to this Datastream\"},{\"name\":\"ObservedProperty\",\"type\":{\"type\":\"record\",\"name\":\"ObservedProperty\",\"doc\":\"An ObservedProperty specifies the phenomenon of an Observation.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the ObservedProperty\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the ObservedProperty\"},{\"name\":\"definition\",\"type\":\"string\",\"doc\":\"URI of the definition of the ObservedProperty\"}]},\"doc\":\"ObservedProperty associated to this Datastream\"},{\"name\":\"Sensor\",\"type\":{\"type\":\"record\",\"name\":\"Sensor\",\"doc\":\"A Sensor is an instrument that observes a property or phenomenon with the goal of producing an estimate of the value of the property.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the Sensor\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the Sensor\"},{\"name\":\"encodingType\",\"type\":\"string\",\"doc\":\"Encoding type of the Sensor\"},{\"name\":\"metadata\",\"type\":\"string\",\"doc\":\"Metadata of the Sensor\"}]},\"doc\":\"Sensor associated to this Datastream\"},{\"name\":\"Observations\",\"type\":\"null\",\"doc\":\"Unused optional Observation(s) associated to this Datastream\"}]},\"doc\":\"Datastream associated with the Observation\"},{\"name\":\"FeatureOfInterest\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FeatureOfInterest\",\"doc\":\"In the case of remote sensing, the FeatureOfInterest can be the geographical area or volume that is being sensed.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"Name of the FeatureOfInterest\"},{\"name\":\"description\",\"type\":\"string\",\"doc\":\"Description of the FeatureOfInterest\"},{\"name\":\"encodingType\",\"type\":\"string\",\"doc\":\"Representation/encoding type of the FeatureOfInterest\"},{\"name\":\"feature\",\"type\":\"LocationType\",\"doc\":\"LocationType object containing the feature of the Thing\"}]}],\"doc\":\"Optional FeatureOfInterest associated with the Observation\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Observation> ENCODER =
      new BinaryMessageEncoder<Observation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Observation> DECODER =
      new BinaryMessageDecoder<Observation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Observation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Observation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Observation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Observation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Observation from a ByteBuffer. */
  public static Observation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Time (ISO 8601) of the phenomenon */
  @Deprecated public java.lang.CharSequence phenomenonTime;
  /** Time (ISO 8601) of the result */
  @Deprecated public java.lang.CharSequence resultTime;
  /** Any result value represented as a string */
  @Deprecated public java.lang.CharSequence result;
  /** Optional string describing the quality of the result */
  @Deprecated public java.lang.CharSequence resultQuality;
  /** Optional time (ISO 8601) of validity */
  @Deprecated public java.lang.CharSequence validTime;
  /** Parameters of the Observation (currently unused) */
  @Deprecated public java.lang.Void parameters;
  /** Datastream associated with the Observation */
  @Deprecated public main.java.pw.oliver.jmkb.avroclasses.Datastream Datastream;
  /** Optional FeatureOfInterest associated with the Observation */
  @Deprecated public main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest FeatureOfInterest;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Observation() {}

  /**
   * All-args constructor.
   * @param phenomenonTime Time (ISO 8601) of the phenomenon
   * @param resultTime Time (ISO 8601) of the result
   * @param result Any result value represented as a string
   * @param resultQuality Optional string describing the quality of the result
   * @param validTime Optional time (ISO 8601) of validity
   * @param parameters Parameters of the Observation (currently unused)
   * @param Datastream Datastream associated with the Observation
   * @param FeatureOfInterest Optional FeatureOfInterest associated with the Observation
   */
  public Observation(java.lang.CharSequence phenomenonTime, java.lang.CharSequence resultTime, java.lang.CharSequence result, java.lang.CharSequence resultQuality, java.lang.CharSequence validTime, java.lang.Void parameters, main.java.pw.oliver.jmkb.avroclasses.Datastream Datastream, main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest FeatureOfInterest) {
    this.phenomenonTime = phenomenonTime;
    this.resultTime = resultTime;
    this.result = result;
    this.resultQuality = resultQuality;
    this.validTime = validTime;
    this.parameters = parameters;
    this.Datastream = Datastream;
    this.FeatureOfInterest = FeatureOfInterest;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return phenomenonTime;
    case 1: return resultTime;
    case 2: return result;
    case 3: return resultQuality;
    case 4: return validTime;
    case 5: return parameters;
    case 6: return Datastream;
    case 7: return FeatureOfInterest;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: phenomenonTime = (java.lang.CharSequence)value$; break;
    case 1: resultTime = (java.lang.CharSequence)value$; break;
    case 2: result = (java.lang.CharSequence)value$; break;
    case 3: resultQuality = (java.lang.CharSequence)value$; break;
    case 4: validTime = (java.lang.CharSequence)value$; break;
    case 5: parameters = (java.lang.Void)value$; break;
    case 6: Datastream = (main.java.pw.oliver.jmkb.avroclasses.Datastream)value$; break;
    case 7: FeatureOfInterest = (main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phenomenonTime' field.
   * @return Time (ISO 8601) of the phenomenon
   */
  public java.lang.CharSequence getPhenomenonTime() {
    return phenomenonTime;
  }

  /**
   * Sets the value of the 'phenomenonTime' field.
   * Time (ISO 8601) of the phenomenon
   * @param value the value to set.
   */
  public void setPhenomenonTime(java.lang.CharSequence value) {
    this.phenomenonTime = value;
  }

  /**
   * Gets the value of the 'resultTime' field.
   * @return Time (ISO 8601) of the result
   */
  public java.lang.CharSequence getResultTime() {
    return resultTime;
  }

  /**
   * Sets the value of the 'resultTime' field.
   * Time (ISO 8601) of the result
   * @param value the value to set.
   */
  public void setResultTime(java.lang.CharSequence value) {
    this.resultTime = value;
  }

  /**
   * Gets the value of the 'result' field.
   * @return Any result value represented as a string
   */
  public java.lang.CharSequence getResult() {
    return result;
  }

  /**
   * Sets the value of the 'result' field.
   * Any result value represented as a string
   * @param value the value to set.
   */
  public void setResult(java.lang.CharSequence value) {
    this.result = value;
  }

  /**
   * Gets the value of the 'resultQuality' field.
   * @return Optional string describing the quality of the result
   */
  public java.lang.CharSequence getResultQuality() {
    return resultQuality;
  }

  /**
   * Sets the value of the 'resultQuality' field.
   * Optional string describing the quality of the result
   * @param value the value to set.
   */
  public void setResultQuality(java.lang.CharSequence value) {
    this.resultQuality = value;
  }

  /**
   * Gets the value of the 'validTime' field.
   * @return Optional time (ISO 8601) of validity
   */
  public java.lang.CharSequence getValidTime() {
    return validTime;
  }

  /**
   * Sets the value of the 'validTime' field.
   * Optional time (ISO 8601) of validity
   * @param value the value to set.
   */
  public void setValidTime(java.lang.CharSequence value) {
    this.validTime = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return Parameters of the Observation (currently unused)
   */
  public java.lang.Void getParameters() {
    return parameters;
  }

  /**
   * Sets the value of the 'parameters' field.
   * Parameters of the Observation (currently unused)
   * @param value the value to set.
   */
  public void setParameters(java.lang.Void value) {
    this.parameters = value;
  }

  /**
   * Gets the value of the 'Datastream' field.
   * @return Datastream associated with the Observation
   */
  public main.java.pw.oliver.jmkb.avroclasses.Datastream getDatastream() {
    return Datastream;
  }

  /**
   * Sets the value of the 'Datastream' field.
   * Datastream associated with the Observation
   * @param value the value to set.
   */
  public void setDatastream(main.java.pw.oliver.jmkb.avroclasses.Datastream value) {
    this.Datastream = value;
  }

  /**
   * Gets the value of the 'FeatureOfInterest' field.
   * @return Optional FeatureOfInterest associated with the Observation
   */
  public main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest getFeatureOfInterest() {
    return FeatureOfInterest;
  }

  /**
   * Sets the value of the 'FeatureOfInterest' field.
   * Optional FeatureOfInterest associated with the Observation
   * @param value the value to set.
   */
  public void setFeatureOfInterest(main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest value) {
    this.FeatureOfInterest = value;
  }

  /**
   * Creates a new Observation RecordBuilder.
   * @return A new Observation RecordBuilder
   */
  public static main.java.pw.oliver.jmkb.avroclasses.Observation.Builder newBuilder() {
    return new main.java.pw.oliver.jmkb.avroclasses.Observation.Builder();
  }

  /**
   * Creates a new Observation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Observation RecordBuilder
   */
  public static main.java.pw.oliver.jmkb.avroclasses.Observation.Builder newBuilder(main.java.pw.oliver.jmkb.avroclasses.Observation.Builder other) {
    return new main.java.pw.oliver.jmkb.avroclasses.Observation.Builder(other);
  }

  /**
   * Creates a new Observation RecordBuilder by copying an existing Observation instance.
   * @param other The existing instance to copy.
   * @return A new Observation RecordBuilder
   */
  public static main.java.pw.oliver.jmkb.avroclasses.Observation.Builder newBuilder(main.java.pw.oliver.jmkb.avroclasses.Observation other) {
    return new main.java.pw.oliver.jmkb.avroclasses.Observation.Builder(other);
  }

  /**
   * RecordBuilder for Observation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Observation>
    implements org.apache.avro.data.RecordBuilder<Observation> {

    /** Time (ISO 8601) of the phenomenon */
    private java.lang.CharSequence phenomenonTime;
    /** Time (ISO 8601) of the result */
    private java.lang.CharSequence resultTime;
    /** Any result value represented as a string */
    private java.lang.CharSequence result;
    /** Optional string describing the quality of the result */
    private java.lang.CharSequence resultQuality;
    /** Optional time (ISO 8601) of validity */
    private java.lang.CharSequence validTime;
    /** Parameters of the Observation (currently unused) */
    private java.lang.Void parameters;
    /** Datastream associated with the Observation */
    private main.java.pw.oliver.jmkb.avroclasses.Datastream Datastream;
    private main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder DatastreamBuilder;
    /** Optional FeatureOfInterest associated with the Observation */
    private main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest FeatureOfInterest;
    private main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest.Builder FeatureOfInterestBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(main.java.pw.oliver.jmkb.avroclasses.Observation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phenomenonTime)) {
        this.phenomenonTime = data().deepCopy(fields()[0].schema(), other.phenomenonTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.resultTime)) {
        this.resultTime = data().deepCopy(fields()[1].schema(), other.resultTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.result)) {
        this.result = data().deepCopy(fields()[2].schema(), other.result);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.resultQuality)) {
        this.resultQuality = data().deepCopy(fields()[3].schema(), other.resultQuality);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validTime)) {
        this.validTime = data().deepCopy(fields()[4].schema(), other.validTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parameters)) {
        this.parameters = data().deepCopy(fields()[5].schema(), other.parameters);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Datastream)) {
        this.Datastream = data().deepCopy(fields()[6].schema(), other.Datastream);
        fieldSetFlags()[6] = true;
      }
      if (other.hasDatastreamBuilder()) {
        this.DatastreamBuilder = main.java.pw.oliver.jmkb.avroclasses.Datastream.newBuilder(other.getDatastreamBuilder());
      }
      if (isValidValue(fields()[7], other.FeatureOfInterest)) {
        this.FeatureOfInterest = data().deepCopy(fields()[7].schema(), other.FeatureOfInterest);
        fieldSetFlags()[7] = true;
      }
      if (other.hasFeatureOfInterestBuilder()) {
        this.FeatureOfInterestBuilder = main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest.newBuilder(other.getFeatureOfInterestBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Observation instance
     * @param other The existing instance to copy.
     */
    private Builder(main.java.pw.oliver.jmkb.avroclasses.Observation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.phenomenonTime)) {
        this.phenomenonTime = data().deepCopy(fields()[0].schema(), other.phenomenonTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.resultTime)) {
        this.resultTime = data().deepCopy(fields()[1].schema(), other.resultTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.result)) {
        this.result = data().deepCopy(fields()[2].schema(), other.result);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.resultQuality)) {
        this.resultQuality = data().deepCopy(fields()[3].schema(), other.resultQuality);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.validTime)) {
        this.validTime = data().deepCopy(fields()[4].schema(), other.validTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parameters)) {
        this.parameters = data().deepCopy(fields()[5].schema(), other.parameters);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Datastream)) {
        this.Datastream = data().deepCopy(fields()[6].schema(), other.Datastream);
        fieldSetFlags()[6] = true;
      }
      this.DatastreamBuilder = null;
      if (isValidValue(fields()[7], other.FeatureOfInterest)) {
        this.FeatureOfInterest = data().deepCopy(fields()[7].schema(), other.FeatureOfInterest);
        fieldSetFlags()[7] = true;
      }
      this.FeatureOfInterestBuilder = null;
    }

    /**
      * Gets the value of the 'phenomenonTime' field.
      * Time (ISO 8601) of the phenomenon
      * @return The value.
      */
    public java.lang.CharSequence getPhenomenonTime() {
      return phenomenonTime;
    }

    /**
      * Sets the value of the 'phenomenonTime' field.
      * Time (ISO 8601) of the phenomenon
      * @param value The value of 'phenomenonTime'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setPhenomenonTime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.phenomenonTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'phenomenonTime' field has been set.
      * Time (ISO 8601) of the phenomenon
      * @return True if the 'phenomenonTime' field has been set, false otherwise.
      */
    public boolean hasPhenomenonTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'phenomenonTime' field.
      * Time (ISO 8601) of the phenomenon
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearPhenomenonTime() {
      phenomenonTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'resultTime' field.
      * Time (ISO 8601) of the result
      * @return The value.
      */
    public java.lang.CharSequence getResultTime() {
      return resultTime;
    }

    /**
      * Sets the value of the 'resultTime' field.
      * Time (ISO 8601) of the result
      * @param value The value of 'resultTime'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setResultTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.resultTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'resultTime' field has been set.
      * Time (ISO 8601) of the result
      * @return True if the 'resultTime' field has been set, false otherwise.
      */
    public boolean hasResultTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'resultTime' field.
      * Time (ISO 8601) of the result
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearResultTime() {
      resultTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * Any result value represented as a string
      * @return The value.
      */
    public java.lang.CharSequence getResult() {
      return result;
    }

    /**
      * Sets the value of the 'result' field.
      * Any result value represented as a string
      * @param value The value of 'result'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setResult(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.result = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * Any result value represented as a string
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'result' field.
      * Any result value represented as a string
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearResult() {
      result = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'resultQuality' field.
      * Optional string describing the quality of the result
      * @return The value.
      */
    public java.lang.CharSequence getResultQuality() {
      return resultQuality;
    }

    /**
      * Sets the value of the 'resultQuality' field.
      * Optional string describing the quality of the result
      * @param value The value of 'resultQuality'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setResultQuality(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.resultQuality = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'resultQuality' field has been set.
      * Optional string describing the quality of the result
      * @return True if the 'resultQuality' field has been set, false otherwise.
      */
    public boolean hasResultQuality() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'resultQuality' field.
      * Optional string describing the quality of the result
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearResultQuality() {
      resultQuality = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTime' field.
      * Optional time (ISO 8601) of validity
      * @return The value.
      */
    public java.lang.CharSequence getValidTime() {
      return validTime;
    }

    /**
      * Sets the value of the 'validTime' field.
      * Optional time (ISO 8601) of validity
      * @param value The value of 'validTime'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setValidTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.validTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'validTime' field has been set.
      * Optional time (ISO 8601) of validity
      * @return True if the 'validTime' field has been set, false otherwise.
      */
    public boolean hasValidTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'validTime' field.
      * Optional time (ISO 8601) of validity
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearValidTime() {
      validTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * Parameters of the Observation (currently unused)
      * @return The value.
      */
    public java.lang.Void getParameters() {
      return parameters;
    }

    /**
      * Sets the value of the 'parameters' field.
      * Parameters of the Observation (currently unused)
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setParameters(java.lang.Void value) {
      validate(fields()[5], value);
      this.parameters = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * Parameters of the Observation (currently unused)
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'parameters' field.
      * Parameters of the Observation (currently unused)
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Datastream' field.
      * Datastream associated with the Observation
      * @return The value.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream getDatastream() {
      return Datastream;
    }

    /**
      * Sets the value of the 'Datastream' field.
      * Datastream associated with the Observation
      * @param value The value of 'Datastream'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setDatastream(main.java.pw.oliver.jmkb.avroclasses.Datastream value) {
      validate(fields()[6], value);
      this.DatastreamBuilder = null;
      this.Datastream = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Datastream' field has been set.
      * Datastream associated with the Observation
      * @return True if the 'Datastream' field has been set, false otherwise.
      */
    public boolean hasDatastream() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'Datastream' field and creates one if it doesn't exist yet.
     * Datastream associated with the Observation
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder getDatastreamBuilder() {
      if (DatastreamBuilder == null) {
        if (hasDatastream()) {
          setDatastreamBuilder(main.java.pw.oliver.jmkb.avroclasses.Datastream.newBuilder(Datastream));
        } else {
          setDatastreamBuilder(main.java.pw.oliver.jmkb.avroclasses.Datastream.newBuilder());
        }
      }
      return DatastreamBuilder;
    }

    /**
     * Sets the Builder instance for the 'Datastream' field
     * Datastream associated with the Observation
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setDatastreamBuilder(main.java.pw.oliver.jmkb.avroclasses.Datastream.Builder value) {
      clearDatastream();
      DatastreamBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Datastream' field has an active Builder instance
     * Datastream associated with the Observation
     * @return True if the 'Datastream' field has an active Builder instance
     */
    public boolean hasDatastreamBuilder() {
      return DatastreamBuilder != null;
    }

    /**
      * Clears the value of the 'Datastream' field.
      * Datastream associated with the Observation
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearDatastream() {
      Datastream = null;
      DatastreamBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'FeatureOfInterest' field.
      * Optional FeatureOfInterest associated with the Observation
      * @return The value.
      */
    public main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest getFeatureOfInterest() {
      return FeatureOfInterest;
    }

    /**
      * Sets the value of the 'FeatureOfInterest' field.
      * Optional FeatureOfInterest associated with the Observation
      * @param value The value of 'FeatureOfInterest'.
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setFeatureOfInterest(main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest value) {
      validate(fields()[7], value);
      this.FeatureOfInterestBuilder = null;
      this.FeatureOfInterest = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'FeatureOfInterest' field has been set.
      * Optional FeatureOfInterest associated with the Observation
      * @return True if the 'FeatureOfInterest' field has been set, false otherwise.
      */
    public boolean hasFeatureOfInterest() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'FeatureOfInterest' field and creates one if it doesn't exist yet.
     * Optional FeatureOfInterest associated with the Observation
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest.Builder getFeatureOfInterestBuilder() {
      if (FeatureOfInterestBuilder == null) {
        if (hasFeatureOfInterest()) {
          setFeatureOfInterestBuilder(main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest.newBuilder(FeatureOfInterest));
        } else {
          setFeatureOfInterestBuilder(main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest.newBuilder());
        }
      }
      return FeatureOfInterestBuilder;
    }

    /**
     * Sets the Builder instance for the 'FeatureOfInterest' field
     * Optional FeatureOfInterest associated with the Observation
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder setFeatureOfInterestBuilder(main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest.Builder value) {
      clearFeatureOfInterest();
      FeatureOfInterestBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'FeatureOfInterest' field has an active Builder instance
     * Optional FeatureOfInterest associated with the Observation
     * @return True if the 'FeatureOfInterest' field has an active Builder instance
     */
    public boolean hasFeatureOfInterestBuilder() {
      return FeatureOfInterestBuilder != null;
    }

    /**
      * Clears the value of the 'FeatureOfInterest' field.
      * Optional FeatureOfInterest associated with the Observation
      * @return This builder.
      */
    public main.java.pw.oliver.jmkb.avroclasses.Observation.Builder clearFeatureOfInterest() {
      FeatureOfInterest = null;
      FeatureOfInterestBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Observation build() {
      try {
        Observation record = new Observation();
        record.phenomenonTime = fieldSetFlags()[0] ? this.phenomenonTime : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.resultTime = fieldSetFlags()[1] ? this.resultTime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.result = fieldSetFlags()[2] ? this.result : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.resultQuality = fieldSetFlags()[3] ? this.resultQuality : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.validTime = fieldSetFlags()[4] ? this.validTime : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.parameters = fieldSetFlags()[5] ? this.parameters : (java.lang.Void) defaultValue(fields()[5]);
        if (DatastreamBuilder != null) {
          record.Datastream = this.DatastreamBuilder.build();
        } else {
          record.Datastream = fieldSetFlags()[6] ? this.Datastream : (main.java.pw.oliver.jmkb.avroclasses.Datastream) defaultValue(fields()[6]);
        }
        if (FeatureOfInterestBuilder != null) {
          record.FeatureOfInterest = this.FeatureOfInterestBuilder.build();
        } else {
          record.FeatureOfInterest = fieldSetFlags()[7] ? this.FeatureOfInterest : (main.java.pw.oliver.jmkb.avroclasses.FeatureOfInterest) defaultValue(fields()[7]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Observation>
    WRITER$ = (org.apache.avro.io.DatumWriter<Observation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Observation>
    READER$ = (org.apache.avro.io.DatumReader<Observation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
